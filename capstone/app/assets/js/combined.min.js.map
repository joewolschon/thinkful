{"version":3,"sources":["assets/js/app.js","assets/js/directives/currentTrack.js","assets/js/services/player.js"],"names":[],"mappings":"AAAA,GAAA,KAAA,QAAA,OAAA,OAAA,cAEA,KAAA,OAAA,WACA,GAAA,YACA,UAAA,mCACA,aAAA,uCCDA,QAAA,OAAA,OAAA,UAAA,eAAA,SAAA,OAAA,WAAA,MAMA,MAHA,YAAA,MAAA,SACA,WAAA,OAAA,SAGA,SAAA,IACA,OAAA,EACA,YAAA,oCACA,WAAA,SAAA,OAAA,QACA,OAAA,QAAA,CACA,IAAA,UAAA,EAMA,aAAA,WACA,GAAA,YAAA,KAAA,MAAA,KAAA,SAAA,OAAA,MAAA,SAAA,IACA,cAAA,OAAA,UACA,OAAA,QAAA,WACA,WAAA,IAAA,OAAA,UAIA,QAAA,OAAA,OAAA,aAAA,SAAA,QACA,SAAA,UACA,SAAA,EACA,OAAA,MAAA,kBAKA,KAAA,SAAA,OACA,MAAA,OAAA,OAAA,iBAAA,SAAA,OACA,KAAA,IAAA,gBAAA,OACA,MAAA,MAAA,YCtCA,QAAA,OAAA,OAAA,QAAA,SAAA,SAAA,YACA,GAAA,MAAA,QACA,IAAA,OAEA,OAAA,IAAA,MAEA,YACA,aAAA,KACA,aAAA,KACA,QAAA,EACA,QAAA,KAOA,UAAA,SAAA,IACA,SAAA,KAAA,IAEA,SAAA,OAAA,IAAA,UAAA,IACA,QAAA,EACA,WAAA,UAGA,SAAA,KAAA,KAQA,aAAA,SAAA,IACA,MAAA,IAAA,IAAA,cAAA,GAAA,SAAA,UACA,QAAA,QAAA,SAAA,OAAA,SAAA,OACA,UAAA,MAAA,SAUA,UAAA,WACA,QAAA,QAAA,MAAA,SAAA,MACA,GAAA,IAAA,UAAA,KAAA,aAAA,SAAA,WACA,QAAA,QAAA,UAAA,SAAA,UACA,aAAA,SAAA,WAYA,SAAA,WAEA,GAAA,OAAA,KAAA,MAAA,KAAA,UAAA,SAAA,OAAA,IACA,QAAA,SAAA,MAEA,IAAA,IAAA,WAAA,QAAA,SAAA,OAGA,MAAA,QAAA,OACA,MAAA,QAAA,MAAA,OAAA,OAAA,IACA,MAAA,YAAA,OAAA,MAAA,eACA,aAIA,aAAA,MACA,WAAA,aAEA,IAAA,OAAA,aAAA,WAAA,QAAA,SAAA,iBACA,MAAA,QAAA,oBAEA,aAGA,aAAA,oBACA,cAAA,SACA,aASA,MAAA,MAAA,SAAA,cACA,SACA,SAAA,SACA,aAAA,aACA,aAAA,EACA,iBAAA,EACA,WAAA,GAEA,YAQA,KAAA,iBAAA,WACA,MAAA,eAMA,KAAA,aAAA,WACA,MAAA,SAGA","file":"combined.min.js","sourcesContent":["var app = angular.module('app', ['ngProgress']);\n\napp.config(function () {\n  SC.initialize({\n    client_id: \"2553d3948bd996a6f522c024161d134b\",\n    redirect_uri: \"http://example.com/callback.html\"\n  });\n});","/**\n * Directive to display information about the current track that is playing.\n * @author Joseph Wolschon <joseph.wolschon@gmail.com>\n */\nangular.module('app').directive('currentTrack', function (player, ngProgress, $log) {\n\n  // Process bar styling. TODO: not sure if I'm going to keep this...\n  ngProgress.color('black');\n  ngProgress.height('10px');\n\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'assets/partials/currentTrack.html',\n    controller: function ($scope, player) {\n      $scope.percent = 0;\n      var playing = false;\n\n      /**\n       * Update progress bar. TODO: fancy equilizer/peak shit\n       *@private\n       */\n      var whilePlaying = function () {\n        var newPercent = Math.round((this.position / $scope.track.duration) * 100);\n        if (newPercent !== $scope.percent) {\n          $scope.percent = newPercent;\n          ngProgress.set($scope.percent);\n        }\n      };\n\n      $scope.$watch(player.tracksLoaded, function (loaded) {\n        if (loaded && !playing) {\n          playing = true;\n          player.start(whilePlaying);\n        }\n      });\n\n    },\n    link: function (scope) {\n      scope.$watch(player.getCurrentTrack_, function (track) {\n        $log.log('current track', track);\n        scope.track = track;\n      });\n    }\n  }\n});","/**\n * @author Joseph Wolschon <joseph.wolschon@gmail.com>\n */\nangular.module('app').service('player', function ($rootScope) {\n    var mokb = 9251246;\n    var gvb = 496642;\n    var pitchfork = 175182;\n    var users = [gvb, mokb];\n\n    var trackIds = [];\n    var currentTrack = null;\n    var soundManager = null;\n    var loaded = false;\n    var options = null;\n\n    /**\n     * Add a track id to the list of tracks to play and start playing if we need to.\n     * @param id of the track\n     * @private\n     */\n    var addTrack_ = function (id) {\n        trackIds.push(id);\n\n        if (trackIds.length > 50 && loaded === false) {\n            loaded = true;\n            $rootScope.$apply();\n        }\n\n        trackIds.push(id);\n    };\n\n    /**\n     * Add all the tracks for a given playlist.\n     * @param id of the playlist\n     * @private\n     */\n    var addPlayList_ = function (id) {\n        return SC.get('/playlists/' + id, function (playlist) {\n            angular.forEach(playlist.tracks, function (track) {\n                addTrack_(track.id);\n            });\n        })\n    };\n\n    /**\n     * Iterate through the users and snag any playlists they have and add all the songs from them to the list of\n     * tracks to play. TODO: future add more users, find similar new songs using the playlists as a base\n     * @private\n     */\n    var setSongs_ = function () {\n        angular.forEach(users, function (user) {\n            SC.get('/users/' + user + '/playlists', function (playlists) {\n                angular.forEach(playlists, function (playlist) {\n                    addPlayList_(playlist.id);\n                });\n            });\n        });\n    };\n\n    /**\n     * Play the next track in the list. If there's an error just skip to the one in the list. There's plenty of reasons\n     * while playing a track could fail. Track data isn't current, the user could have change permissions on who can\n     * stream the song, it could have been deleted, the user who uploaded the song could have been deleted etc.\n     * @private\n     */\n    var playNext = function () {\n\n        var index = Math.floor(Math.random() * (trackIds.length - 1));\n        var trackId = trackIds[index];\n\n        SC.get('/tracks/' + trackId, function (track) {\n\n            // Grab another song if there's issues with this one.\n            if (track === null\n                || (track.errors && track.errors.length > 0)\n                || !track.streamable || track.stream_url === null) {\n                playNext();\n                return;\n            }\n\n            currentTrack = track;\n            $rootScope.$apply();\n\n            SC.stream(currentTrack.stream_url, options, function (soundManagerObj) {\n                if(soundManagerObj === null)\n                {\n                    playNext();\n                    return;\n                }\n                soundManager = soundManagerObj;\n                soundManager.play();\n            }, playNext);\n        });\n    };\n\n    /**\n     * Start streaming tracks.\n     * @param whilePlaying callback that will be periodically called by sound manager. Contains useful information such\n     *   as current position of track, peak/equalizer data etc.\n     */\n    this.start = function (whilePlaying) {\n        options = {\n            onfinish: playNext,\n            whileplaying: whilePlaying,\n            usePeakData: true,\n            useWaveformData: true,\n            useEQData: true\n        };\n        playNext();\n    };\n\n    /**\n     * Get the track that is currently streaming.\n     * @returns {Object} current soundcloud track object\n     * @private\n     */\n    this.getCurrentTrack_ = function () {\n        return currentTrack;\n    };\n\n    /**\n     * @returns {boolean} true if we have at least 1 track to play, otherwise false\n     */\n    this.tracksLoaded = function () {\n        return loaded;\n    };\n\n    setSongs_();\n});"],"sourceRoot":"."}